// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: podcast/v1/podcat.proto

package podcat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PodcatService_CreatePodcast_FullMethodName                = "/podcat.v1.PodcatService/CreatePodcast"
	PodcatService_GetPodcatByTitle_FullMethodName             = "/podcat.v1.PodcatService/GetPodcatByTitle"
	PodcatService_UnaryPodcast_FullMethodName                 = "/podcat.v1.PodcatService/UnaryPodcast"
	PodcatService_ServerStreamingPodcat_FullMethodName        = "/podcat.v1.PodcatService/ServerStreamingPodcat"
	PodcatService_ClientStreamingPodcat_FullMethodName        = "/podcat.v1.PodcatService/ClientStreamingPodcat"
	PodcatService_BidirectionalStreamingPodcat_FullMethodName = "/podcat.v1.PodcatService/BidirectionalStreamingPodcat"
)

// PodcatServiceClient is the client API for PodcatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodcatServiceClient interface {
	CreatePodcast(ctx context.Context, in *PodcatRequest, opts ...grpc.CallOption) (*PodcatResponse, error)
	GetPodcatByTitle(ctx context.Context, in *PodcatRequest, opts ...grpc.CallOption) (*PodcatResponse, error)
	UnaryPodcast(ctx context.Context, in *PodcatRequest, opts ...grpc.CallOption) (*PodcatResponse, error)
	ServerStreamingPodcat(ctx context.Context, in *PodcatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PodcatResponse], error)
	ClientStreamingPodcat(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PodcatRequest, PodcatResponse], error)
	BidirectionalStreamingPodcat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PodcatRequest, PodcatResponse], error)
}

type podcatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPodcatServiceClient(cc grpc.ClientConnInterface) PodcatServiceClient {
	return &podcatServiceClient{cc}
}

func (c *podcatServiceClient) CreatePodcast(ctx context.Context, in *PodcatRequest, opts ...grpc.CallOption) (*PodcatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PodcatResponse)
	err := c.cc.Invoke(ctx, PodcatService_CreatePodcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podcatServiceClient) GetPodcatByTitle(ctx context.Context, in *PodcatRequest, opts ...grpc.CallOption) (*PodcatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PodcatResponse)
	err := c.cc.Invoke(ctx, PodcatService_GetPodcatByTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podcatServiceClient) UnaryPodcast(ctx context.Context, in *PodcatRequest, opts ...grpc.CallOption) (*PodcatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PodcatResponse)
	err := c.cc.Invoke(ctx, PodcatService_UnaryPodcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podcatServiceClient) ServerStreamingPodcat(ctx context.Context, in *PodcatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PodcatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PodcatService_ServiceDesc.Streams[0], PodcatService_ServerStreamingPodcat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PodcatRequest, PodcatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodcatService_ServerStreamingPodcatClient = grpc.ServerStreamingClient[PodcatResponse]

func (c *podcatServiceClient) ClientStreamingPodcat(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PodcatRequest, PodcatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PodcatService_ServiceDesc.Streams[1], PodcatService_ClientStreamingPodcat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PodcatRequest, PodcatResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodcatService_ClientStreamingPodcatClient = grpc.ClientStreamingClient[PodcatRequest, PodcatResponse]

func (c *podcatServiceClient) BidirectionalStreamingPodcat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PodcatRequest, PodcatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PodcatService_ServiceDesc.Streams[2], PodcatService_BidirectionalStreamingPodcat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PodcatRequest, PodcatResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodcatService_BidirectionalStreamingPodcatClient = grpc.BidiStreamingClient[PodcatRequest, PodcatResponse]

// PodcatServiceServer is the server API for PodcatService service.
// All implementations must embed UnimplementedPodcatServiceServer
// for forward compatibility.
type PodcatServiceServer interface {
	CreatePodcast(context.Context, *PodcatRequest) (*PodcatResponse, error)
	GetPodcatByTitle(context.Context, *PodcatRequest) (*PodcatResponse, error)
	UnaryPodcast(context.Context, *PodcatRequest) (*PodcatResponse, error)
	ServerStreamingPodcat(*PodcatRequest, grpc.ServerStreamingServer[PodcatResponse]) error
	ClientStreamingPodcat(grpc.ClientStreamingServer[PodcatRequest, PodcatResponse]) error
	BidirectionalStreamingPodcat(grpc.BidiStreamingServer[PodcatRequest, PodcatResponse]) error
	mustEmbedUnimplementedPodcatServiceServer()
}

// UnimplementedPodcatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPodcatServiceServer struct{}

func (UnimplementedPodcatServiceServer) CreatePodcast(context.Context, *PodcatRequest) (*PodcatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePodcast not implemented")
}
func (UnimplementedPodcatServiceServer) GetPodcatByTitle(context.Context, *PodcatRequest) (*PodcatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodcatByTitle not implemented")
}
func (UnimplementedPodcatServiceServer) UnaryPodcast(context.Context, *PodcatRequest) (*PodcatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryPodcast not implemented")
}
func (UnimplementedPodcatServiceServer) ServerStreamingPodcat(*PodcatRequest, grpc.ServerStreamingServer[PodcatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingPodcat not implemented")
}
func (UnimplementedPodcatServiceServer) ClientStreamingPodcat(grpc.ClientStreamingServer[PodcatRequest, PodcatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingPodcat not implemented")
}
func (UnimplementedPodcatServiceServer) BidirectionalStreamingPodcat(grpc.BidiStreamingServer[PodcatRequest, PodcatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingPodcat not implemented")
}
func (UnimplementedPodcatServiceServer) mustEmbedUnimplementedPodcatServiceServer() {}
func (UnimplementedPodcatServiceServer) testEmbeddedByValue()                       {}

// UnsafePodcatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodcatServiceServer will
// result in compilation errors.
type UnsafePodcatServiceServer interface {
	mustEmbedUnimplementedPodcatServiceServer()
}

func RegisterPodcatServiceServer(s grpc.ServiceRegistrar, srv PodcatServiceServer) {
	// If the following call pancis, it indicates UnimplementedPodcatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PodcatService_ServiceDesc, srv)
}

func _PodcatService_CreatePodcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodcatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcatServiceServer).CreatePodcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodcatService_CreatePodcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcatServiceServer).CreatePodcast(ctx, req.(*PodcatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodcatService_GetPodcatByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodcatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcatServiceServer).GetPodcatByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodcatService_GetPodcatByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcatServiceServer).GetPodcatByTitle(ctx, req.(*PodcatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodcatService_UnaryPodcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodcatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodcatServiceServer).UnaryPodcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodcatService_UnaryPodcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodcatServiceServer).UnaryPodcast(ctx, req.(*PodcatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodcatService_ServerStreamingPodcat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PodcatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PodcatServiceServer).ServerStreamingPodcat(m, &grpc.GenericServerStream[PodcatRequest, PodcatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodcatService_ServerStreamingPodcatServer = grpc.ServerStreamingServer[PodcatResponse]

func _PodcatService_ClientStreamingPodcat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PodcatServiceServer).ClientStreamingPodcat(&grpc.GenericServerStream[PodcatRequest, PodcatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodcatService_ClientStreamingPodcatServer = grpc.ClientStreamingServer[PodcatRequest, PodcatResponse]

func _PodcatService_BidirectionalStreamingPodcat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PodcatServiceServer).BidirectionalStreamingPodcat(&grpc.GenericServerStream[PodcatRequest, PodcatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PodcatService_BidirectionalStreamingPodcatServer = grpc.BidiStreamingServer[PodcatRequest, PodcatResponse]

// PodcatService_ServiceDesc is the grpc.ServiceDesc for PodcatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodcatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "podcat.v1.PodcatService",
	HandlerType: (*PodcatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePodcast",
			Handler:    _PodcatService_CreatePodcast_Handler,
		},
		{
			MethodName: "GetPodcatByTitle",
			Handler:    _PodcatService_GetPodcatByTitle_Handler,
		},
		{
			MethodName: "UnaryPodcast",
			Handler:    _PodcatService_UnaryPodcast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingPodcat",
			Handler:       _PodcatService_ServerStreamingPodcat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingPodcat",
			Handler:       _PodcatService_ClientStreamingPodcat_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingPodcat",
			Handler:       _PodcatService_BidirectionalStreamingPodcat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "podcast/v1/podcat.proto",
}
