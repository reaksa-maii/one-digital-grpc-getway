// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: movie/v1/movie.proto

package movie

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Movie_EchoMessage_FullMethodName                 = "/movie.v1.Movie/EchoMessage"
	Movie_UnaryEcho_FullMethodName                   = "/movie.v1.Movie/UnaryEcho"
	Movie_ServerStreamingMovie_FullMethodName        = "/movie.v1.Movie/ServerStreamingMovie"
	Movie_ClientStreamingMovie_FullMethodName        = "/movie.v1.Movie/ClientStreamingMovie"
	Movie_BidirectionalStreamingMovie_FullMethodName = "/movie.v1.Movie/BidirectionalStreamingMovie"
)

// MovieClient is the client API for Movie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieClient interface {
	EchoMessage(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error)
	UnaryEcho(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error)
	ServerStreamingMovie(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MovieResponse], error)
	ClientStreamingMovie(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MovieRequest, MovieResponse], error)
	BidirectionalStreamingMovie(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MovieRequest, MovieResponse], error)
}

type movieClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieClient(cc grpc.ClientConnInterface) MovieClient {
	return &movieClient{cc}
}

func (c *movieClient) EchoMessage(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, Movie_EchoMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieClient) UnaryEcho(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, Movie_UnaryEcho_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieClient) ServerStreamingMovie(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MovieResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Movie_ServiceDesc.Streams[0], Movie_ServerStreamingMovie_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MovieRequest, MovieResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Movie_ServerStreamingMovieClient = grpc.ServerStreamingClient[MovieResponse]

func (c *movieClient) ClientStreamingMovie(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MovieRequest, MovieResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Movie_ServiceDesc.Streams[1], Movie_ClientStreamingMovie_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MovieRequest, MovieResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Movie_ClientStreamingMovieClient = grpc.ClientStreamingClient[MovieRequest, MovieResponse]

func (c *movieClient) BidirectionalStreamingMovie(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MovieRequest, MovieResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Movie_ServiceDesc.Streams[2], Movie_BidirectionalStreamingMovie_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MovieRequest, MovieResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Movie_BidirectionalStreamingMovieClient = grpc.BidiStreamingClient[MovieRequest, MovieResponse]

// MovieServer is the server API for Movie service.
// All implementations must embed UnimplementedMovieServer
// for forward compatibility.
type MovieServer interface {
	EchoMessage(context.Context, *MovieRequest) (*MovieResponse, error)
	UnaryEcho(context.Context, *MovieRequest) (*MovieResponse, error)
	ServerStreamingMovie(*MovieRequest, grpc.ServerStreamingServer[MovieResponse]) error
	ClientStreamingMovie(grpc.ClientStreamingServer[MovieRequest, MovieResponse]) error
	BidirectionalStreamingMovie(grpc.BidiStreamingServer[MovieRequest, MovieResponse]) error
	mustEmbedUnimplementedMovieServer()
}

// UnimplementedMovieServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieServer struct{}

func (UnimplementedMovieServer) EchoMessage(context.Context, *MovieRequest) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoMessage not implemented")
}
func (UnimplementedMovieServer) UnaryEcho(context.Context, *MovieRequest) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEcho not implemented")
}
func (UnimplementedMovieServer) ServerStreamingMovie(*MovieRequest, grpc.ServerStreamingServer[MovieResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingMovie not implemented")
}
func (UnimplementedMovieServer) ClientStreamingMovie(grpc.ClientStreamingServer[MovieRequest, MovieResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingMovie not implemented")
}
func (UnimplementedMovieServer) BidirectionalStreamingMovie(grpc.BidiStreamingServer[MovieRequest, MovieResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingMovie not implemented")
}
func (UnimplementedMovieServer) mustEmbedUnimplementedMovieServer() {}
func (UnimplementedMovieServer) testEmbeddedByValue()               {}

// UnsafeMovieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServer will
// result in compilation errors.
type UnsafeMovieServer interface {
	mustEmbedUnimplementedMovieServer()
}

func RegisterMovieServer(s grpc.ServiceRegistrar, srv MovieServer) {
	// If the following call pancis, it indicates UnimplementedMovieServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Movie_ServiceDesc, srv)
}

func _Movie_EchoMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).EchoMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Movie_EchoMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).EchoMessage(ctx, req.(*MovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movie_UnaryEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).UnaryEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Movie_UnaryEcho_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).UnaryEcho(ctx, req.(*MovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movie_ServerStreamingMovie_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MovieRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServer).ServerStreamingMovie(m, &grpc.GenericServerStream[MovieRequest, MovieResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Movie_ServerStreamingMovieServer = grpc.ServerStreamingServer[MovieResponse]

func _Movie_ClientStreamingMovie_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovieServer).ClientStreamingMovie(&grpc.GenericServerStream[MovieRequest, MovieResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Movie_ClientStreamingMovieServer = grpc.ClientStreamingServer[MovieRequest, MovieResponse]

func _Movie_BidirectionalStreamingMovie_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovieServer).BidirectionalStreamingMovie(&grpc.GenericServerStream[MovieRequest, MovieResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Movie_BidirectionalStreamingMovieServer = grpc.BidiStreamingServer[MovieRequest, MovieResponse]

// Movie_ServiceDesc is the grpc.ServiceDesc for Movie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Movie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie.v1.Movie",
	HandlerType: (*MovieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoMessage",
			Handler:    _Movie_EchoMessage_Handler,
		},
		{
			MethodName: "UnaryEcho",
			Handler:    _Movie_UnaryEcho_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingMovie",
			Handler:       _Movie_ServerStreamingMovie_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingMovie",
			Handler:       _Movie_ClientStreamingMovie_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingMovie",
			Handler:       _Movie_BidirectionalStreamingMovie_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "movie/v1/movie.proto",
}
