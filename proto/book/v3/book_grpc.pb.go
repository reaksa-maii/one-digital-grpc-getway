// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: book/v3/book.proto

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Book_BookMessage_FullMethodName                = "/book.v3.Book/BookMessage"
	Book_UnaryBook_FullMethodName                  = "/book.v3.Book/UnaryBook"
	Book_ServerStreamingBook_FullMethodName        = "/book.v3.Book/ServerStreamingBook"
	Book_ClientStreamingBook_FullMethodName        = "/book.v3.Book/ClientStreamingBook"
	Book_BidirectionalStreamingBook_FullMethodName = "/book.v3.Book/BidirectionalStreamingBook"
)

// BookClient is the client API for Book service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookClient interface {
	BookMessage(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	UnaryBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	ServerStreamingBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookResponse], error)
	ClientStreamingBook(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BookRequest, BookResponse], error)
	BidirectionalStreamingBook(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BookRequest, BookResponse], error)
}

type bookClient struct {
	cc grpc.ClientConnInterface
}

func NewBookClient(cc grpc.ClientConnInterface) BookClient {
	return &bookClient{cc}
}

func (c *bookClient) BookMessage(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, Book_BookMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) UnaryBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, Book_UnaryBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) ServerStreamingBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Book_ServiceDesc.Streams[0], Book_ServerStreamingBook_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BookRequest, BookResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Book_ServerStreamingBookClient = grpc.ServerStreamingClient[BookResponse]

func (c *bookClient) ClientStreamingBook(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BookRequest, BookResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Book_ServiceDesc.Streams[1], Book_ClientStreamingBook_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BookRequest, BookResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Book_ClientStreamingBookClient = grpc.ClientStreamingClient[BookRequest, BookResponse]

func (c *bookClient) BidirectionalStreamingBook(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BookRequest, BookResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Book_ServiceDesc.Streams[2], Book_BidirectionalStreamingBook_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BookRequest, BookResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Book_BidirectionalStreamingBookClient = grpc.BidiStreamingClient[BookRequest, BookResponse]

// BookServer is the server API for Book service.
// All implementations must embed UnimplementedBookServer
// for forward compatibility.
type BookServer interface {
	BookMessage(context.Context, *BookRequest) (*BookResponse, error)
	UnaryBook(context.Context, *BookRequest) (*BookResponse, error)
	ServerStreamingBook(*BookRequest, grpc.ServerStreamingServer[BookResponse]) error
	ClientStreamingBook(grpc.ClientStreamingServer[BookRequest, BookResponse]) error
	BidirectionalStreamingBook(grpc.BidiStreamingServer[BookRequest, BookResponse]) error
	mustEmbedUnimplementedBookServer()
}

// UnimplementedBookServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookServer struct{}

func (UnimplementedBookServer) BookMessage(context.Context, *BookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookMessage not implemented")
}
func (UnimplementedBookServer) UnaryBook(context.Context, *BookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryBook not implemented")
}
func (UnimplementedBookServer) ServerStreamingBook(*BookRequest, grpc.ServerStreamingServer[BookResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingBook not implemented")
}
func (UnimplementedBookServer) ClientStreamingBook(grpc.ClientStreamingServer[BookRequest, BookResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingBook not implemented")
}
func (UnimplementedBookServer) BidirectionalStreamingBook(grpc.BidiStreamingServer[BookRequest, BookResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingBook not implemented")
}
func (UnimplementedBookServer) mustEmbedUnimplementedBookServer() {}
func (UnimplementedBookServer) testEmbeddedByValue()              {}

// UnsafeBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServer will
// result in compilation errors.
type UnsafeBookServer interface {
	mustEmbedUnimplementedBookServer()
}

func RegisterBookServer(s grpc.ServiceRegistrar, srv BookServer) {
	// If the following call pancis, it indicates UnimplementedBookServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Book_ServiceDesc, srv)
}

func _Book_BookMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).BookMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Book_BookMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).BookMessage(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_UnaryBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).UnaryBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Book_UnaryBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).UnaryBook(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_ServerStreamingBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServer).ServerStreamingBook(m, &grpc.GenericServerStream[BookRequest, BookResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Book_ServerStreamingBookServer = grpc.ServerStreamingServer[BookResponse]

func _Book_ClientStreamingBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookServer).ClientStreamingBook(&grpc.GenericServerStream[BookRequest, BookResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Book_ClientStreamingBookServer = grpc.ClientStreamingServer[BookRequest, BookResponse]

func _Book_BidirectionalStreamingBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookServer).BidirectionalStreamingBook(&grpc.GenericServerStream[BookRequest, BookResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Book_BidirectionalStreamingBookServer = grpc.BidiStreamingServer[BookRequest, BookResponse]

// Book_ServiceDesc is the grpc.ServiceDesc for Book service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Book_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.v3.Book",
	HandlerType: (*BookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookMessage",
			Handler:    _Book_BookMessage_Handler,
		},
		{
			MethodName: "UnaryBook",
			Handler:    _Book_UnaryBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingBook",
			Handler:       _Book_ServerStreamingBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingBook",
			Handler:       _Book_ClientStreamingBook_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingBook",
			Handler:       _Book_BidirectionalStreamingBook_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "book/v3/book.proto",
}
